Index: exp/maps_KI_03_routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\nimport numpy as np\nfrom shapely.geometry import Point, LineString, box\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport matplotlib as mpl\nimport contextily as cx\nimport rasterio\nfrom tueplots import bundles\nfrom matplotlib.backends.backend_pdf import PdfPages\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nfrom matplotlib.colors import SymLogNorm\n\n#### 00 read cleaned data\nfrom ipynb.fs.full.exploration_cleaning import get_data\nfrom ipynb.fs.full.exploration_cleaning import get_paths\n\ndata = get_data(which=\"mean\")\npath_delays = get_paths()\ngdf_stations = pd.read_csv(\"../dat/stations_with_nearest_routes.csv\", sep=\",\")\ndata_routes = gpd.read_file(\"../dat/geo-strecke/strecken_polyline.shp\")\n\nprint(\"There are {} unique routes we found.\".format(len(path_delays)))\n\n#### 01 Routes\n\n## 1.1 Most reliable route\n# get the route with the least delay = most reliable route\npaths_sorted = sorted(path_delays.items(), key=lambda x: x[1][\"mean_delay\"])\nrel_path = paths_sorted[0][1][\"routes\"]\nprint(\"The optimal route is: {}\".format(rel_path))\nprint(paths_sorted[0][1][\"mean_delay\"])\n\n# filter the data for the rel_path\ngdf_stations_rel = gdf_stations[gdf_stations[\"Route\"].isin(rel_path)]\n\n# merge with data\ngdf_stations_rel = gdf_stations_rel.merge(data, on=\"Station or stop\")\n\nprint(\"The number of stations included in the optimal route are: {}\".format(\n    len(gdf_stations_rel[\"Station or stop\"].unique())))\n\n## 1.2 Fastest route\n# Fastest route that Deutsche Bahn offers\nfastest_route = [80290288,  # Stuttgart\n                 80290270, 80297853, 80297846,\n                 80196212, 80297788, 80297770, 80145615,\n                 80142620, 80183079, 80142786, 80142877,\n                 80145649, 80144147, 80140640, 80180919,\n                 80140624, 80140616, 80147124, 80182576, 80042408,\n                 80143909, 80140236, 80140137,  # Mannheim\n                 80140186, 80113324, 80113316, 80113308,\n                 80113118, 80113092, 80113084,\n                 80113076, 80104711, 80113043, 80113035, 80112995, 80112987, 80105767, 80112953, 80113365,  # Darmstadt\n                 80112813, 80112839, 80112854, 80105098, 80108555, 80107995  # Frankfurt Main\n                 ]\n\n# filter the data for the fastest route\ngdf_stations_fast = gdf_stations[gdf_stations[\"Station or stop\"].isin(fastest_route)]\n\n# merge with data\ngdf_stations_fast = gdf_stations_fast.merge(data, on=\"Station or stop\")\n\nprint(\"The number of stations included in the fastest route are: {}\".format(\n    len(gdf_stations_fast[\"Station or stop\"].unique())))\n\n#### FASTEST ROUTE BY DB (POINTS) ####\n\n#### 01 map of Germany\n# Extract LineString coordinates and create LineString geometries & point geometries\ngeometry_points = [Point(xy) for xy in\n                   zip(gdf_stations_fast[\"Coordinate Longitude\"], gdf_stations_fast[\"Coordinate Latitude\"])]\n\n# Create GeoDataFrame\ngeo_df_points = gpd.GeoDataFrame(gdf_stations_fast, geometry=geometry_points, crs=\"EPSG:4326\")\n\n# Get a map of Germany, save as tif\ngermany = cx.Place(\"Deutschland\", source=cx.providers.OpenStreetMap.Mapnik)\n\n# Get the shape of Germany\nwith rasterio.open(\"../doc/fig/tifs/germany_osm.tif\") as r:\n    west, south, east, north = tuple(r.bounds)\n    germany_crs = r.crs\nbb_poly = box(west, south, east, north)\nbb_poly = gpd.GeoDataFrame({\"geometry\": [bb_poly]}, crs=germany_crs)\n\n# Overlay with GeoDataFrame for linestrings\ngdf_germany = gpd.overlay(geo_df_points, bb_poly.to_crs(geo_df_points.crs), how=\"intersection\")\n\n# Ensure the data is in the proper geographic coordinate system\ngdf_germany_points = gdf_germany.to_crs(epsg=3395)\n\n#### 02 plot (full Germany map)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(3, 4))\n\n# add condition for the points\ncondition = gdf_germany_points[\"Minutes of delay\"] >= 6\ngdf_germany_points[condition].plot(ax=ax, color=\"crimson\", markersize=1, label='>= 6 min')\ngdf_germany_points[~condition].plot(ax=ax, color=\"#19a824\", markersize=1, label='< 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_points.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=False)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_points.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax, title=\"Fastest route\")\n\n# Add labels and legend\nax.legend(loc=\"upper left\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_fastest_route_points_full.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 04 plot (zoomed on route)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(3, 6))\n\n# add condition for the points\ncondition = gdf_germany_points[\"Minutes of delay\"] >= 6\ngdf_germany_points[condition].plot(ax=ax, color=\"crimson\", markersize=12, label='>= 6 min')\ngdf_germany_points[~condition].plot(ax=ax, color=\"#19a824\", markersize=12, label='< 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_points.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=True)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_points.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax, title=\"Fastest route\")\n\n# Add labels and legend\nax.legend(loc=\"upper right\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_fastest_route_points_zoomed.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 05 plot both\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6, 4))\n\n# add condition for the points\ncondition = gdf_germany_points[\"Minutes of delay\"] >= 6\ngdf_germany_points[condition].plot(ax=ax1, color=\"crimson\", markersize=1, label='>= 6 min')\ngdf_germany_points[~condition].plot(ax=ax1, color=\"#19a824\", markersize=1, label='< 6 min')\n\n# add condition for the points\ncondition = gdf_germany_points[\"Minutes of delay\"] >= 6\ngdf_germany_points[condition].plot(ax=ax2, color=\"crimson\", markersize=12, label='>= 6 min')\ngdf_germany_points[~condition].plot(ax=ax2, color=\"#19a824\", markersize=12, label='< 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax1, crs=gdf_germany_points.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=False)\ncx.add_basemap(ax=ax2, crs=gdf_germany_points.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=True, zoom=100)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_points.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax1, title=\"Fastest route\")\ncx.plot_map(im2, bbox, ax=ax2, title=\"Fastest route (zoomed)\")\n\n# Add labels and legend\nax1.legend(loc=\"upper left\", frameon=False)\nax2.legend(loc=\"upper right\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_fastest_route_points.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### MOST RELIABLE ROUTE BY OUR MODEL (POINTS) ####\n\n\n#### 02 map of Germany\n# Extract LineString coordinates and create LineString geometries & point geometries\ngeometry_points = [Point(xy) for xy in\n                   zip(gdf_stations_rel[\"Coordinate Longitude\"], gdf_stations_rel[\"Coordinate Latitude\"])]\n\n# Create GeoDataFrame\ngeo_df_points = gpd.GeoDataFrame(gdf_stations_rel, geometry=geometry_points, crs=\"EPSG:4326\")\n\n# Get a map of Germany, save as tif\ngermany = cx.Place(\"Deutschland\", source=cx.providers.OpenStreetMap.Mapnik)\n\n# Get the shape of Germany\nwith rasterio.open(\"../doc/fig/tifs/germany_osm.tif\") as r:\n    west, south, east, north = tuple(r.bounds)\n    germany_crs = r.crs\nbb_poly = box(west, south, east, north)\nbb_poly = gpd.GeoDataFrame({\"geometry\": [bb_poly]}, crs=germany_crs)\n\n# Overlay with GeoDataFrame for linestrings\ngdf_germany = gpd.overlay(geo_df_points, bb_poly.to_crs(geo_df_points.crs), how=\"intersection\")\n\n# Ensure the data is in the proper geographic coordinate system\ngdf_germany_points = gdf_germany.to_crs(epsg=3395)\n\n#### 03 plot (full Germany map)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(3, 4))\n\n# add condition for the points\ncondition = gdf_germany_points[\"Minutes of delay\"] >= 6\ngdf_germany_points[condition].plot(ax=ax, color=\"crimson\", markersize=1, label='>= 6 min')\ngdf_germany_points[~condition].plot(ax=ax, color=\"#19a824\", markersize=1, label='< 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_points.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=False)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_points.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax, title=\"Most reliable route\")\n\n# Add labels and legend\nax.legend(loc=\"upper left\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_most_reliable_route_points_full.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 04 plot (zoomed on route)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(3, 6))\n\n# add condition for the points\ncondition = gdf_germany_points[\"Minutes of delay\"] >= 6\ngdf_germany_points[condition].plot(ax=ax, color=\"crimson\", markersize=12, label='>= 6 min')\ngdf_germany_points[~condition].plot(ax=ax, color=\"#19a824\", markersize=12, label='< 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_points.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=True)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_points.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax, title=\"Most reliable route\")\n\n# Add labels and legend\nax.legend(loc=\"upper right\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_most_reliable_route_points_zoomed.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 05 plot both\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6, 4))\n\n# add condition for the points\ncondition = gdf_germany_points[\"Minutes of delay\"] >= 6\ngdf_germany_points[condition].plot(ax=ax1, color=\"crimson\", markersize=1, label='>= 6 min')\ngdf_germany_points[~condition].plot(ax=ax1, color=\"#19a824\", markersize=1, label='< 6 min')\n\n# add condition for the points\ncondition = gdf_germany_points[\"Minutes of delay\"] >= 6\ngdf_germany_points[condition].plot(ax=ax2, color=\"crimson\", markersize=12, label='>= 6 min')\ngdf_germany_points[~condition].plot(ax=ax2, color=\"#19a824\", markersize=12, label='< 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax1, crs=gdf_germany_points.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=False)\ncx.add_basemap(ax=ax2, crs=gdf_germany_points.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=True, zoom=100)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_points.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax1, title=\"Most reliable route\")\ncx.plot_map(im2, bbox, ax=ax2, title=\"Most reliable route (zoomed)\")\n\n# Add labels and legend\nax1.legend(loc=\"upper left\", frameon=False)\nax2.legend(loc=\"upper right\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_most_reliable_route_points.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### MOST RELIABLE ROUTE BY OUR MODEL (LINESTRINGS) ####\n\n## 1.1 Most reliable route\n# get the route with the least delay = most reliable route\npaths_sorted = sorted(path_delays.items(), key=lambda x: x[1][\"mean_delay\"])\nrel_path = paths_sorted[0][1][\"routes\"]\n\n# filter the data for the rel_path\ngdf_stations_rel = gdf_stations[gdf_stations[\"Route\"].isin(rel_path)]\n\n# merge with data\ngdf_stations_rel = gdf_stations_rel.merge(data, on=\"Station or stop\")\n\n# create geometry column with a point object of the coordinates\ngeometry = [Point(xy) for xy in zip(gdf_stations_rel[\"Coordinate Longitude\"], gdf_stations_rel[\"Coordinate Latitude\"])]\n\n# create GeoDataFrame\ngeo_df = gpd.GeoDataFrame(gdf_stations_rel, geometry=geometry, crs=\"EPSG:4326\")  # Use the correct CRS\n\n# merge the two datasets\n# rename the column \"strecke_nr\" to \"Route\"\ndata_routes = data_routes.rename(columns={\"strecke_nr\": \"Route\"})\ndata_routes[\"Route\"] = data_routes[\"Route\"].astype(float)\ndata_delay_routes = pd.merge(data_routes, gdf_stations_rel, on=\"Route\", how=\"right\")\n\n# create new dataset with colums Route, Minutes of delay\ndata_delay_routes = data_delay_routes[[\"Minutes of delay\", \"Route\"]].copy()\n\n# calculate mean per route, without index column\ndata_delay_routes = data_delay_routes.groupby([\"Route\"]).mean()\n\n# again merge with data_routes to get the geometry\ndata_delay_routes = pd.merge(data_delay_routes, data_routes, on=\"Route\", how=\"left\")\n\n# group the dataset by geometry\n# data_delay_routes = data_delay_routes.groupby([\"geometry\"]).mean()\n\n# only take columns Minutes of delay, Route, geometry\ndata_delay_routes = data_delay_routes[[\"Minutes of delay\", \"Route\", \"geometry\"]].copy()\ndata_delay_routes = data_delay_routes.groupby([\"geometry\"], as_index=False).mean()\n\n#### 02 map of Germany\n# Extract LineString coordinates and create LineString geometries\ngeometry_linestrings = [LineString(x) for x in data_delay_routes[\"geometry\"]]\n\n# Create GeoDataFrame for linestrings\ngeo_df_linestrings = gpd.GeoDataFrame(data_delay_routes, geometry=geometry_linestrings, crs=\"EPSG:4326\")\n\n# Get a map of Germany, save as tif\ngermany = cx.Place(\"Deutschland\", source=cx.providers.OpenStreetMap.Mapnik)\n\n# Get the shape of Germany\nwith rasterio.open(\"../doc/fig/tifs/germany_osm.tif\") as r:\n    west, south, east, north = tuple(r.bounds)\n    germany_crs = r.crs\nbb_poly = box(west, south, east, north)\nbb_poly = gpd.GeoDataFrame({\"geometry\": [bb_poly]}, crs=germany_crs)\n\n# Overlay with GeoDataFrame for linestrings\ngdf_germany_linestrings = gpd.overlay(geo_df_linestrings, bb_poly.to_crs(geo_df_linestrings.crs), how=\"intersection\")\n\n# Ensure the data is in the proper geographic coordinate system\ngdf_germany_linestrings = gdf_germany_linestrings.to_crs(epsg=3395)\n\n#### 03 plot (full Germany map)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(3, 4))\n\n# add condition for the linestrings\ncondition = gdf_germany_linestrings[\"Minutes of delay\"] < 6\ngdf_germany_linestrings[condition].plot(ax=ax, color=\"#19a824\", linewidth=1.5, label='< 6 min')\ngdf_germany_linestrings[~condition].plot(ax=ax, color=\"crimson\", linewidth=1.5, label='>= 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_linestrings.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=False)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_linestrings.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax, title=\"Most reliable route\")\n\n# Add labels and legend\nax.legend(loc=\"upper left\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_most_reliable_route_line_full.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 04 plot (zoomed on route)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(3, 6))\n\n# add condition for the linestrings\ncondition = gdf_germany_linestrings[\"Minutes of delay\"] < 6\ngdf_germany_linestrings[condition].plot(ax=ax, color=\"#19a824\", linewidth=2, label='< 6 min')\ngdf_germany_linestrings[~condition].plot(ax=ax, color=\"crimson\", linewidth=2, label='>= 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_linestrings.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=True)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_linestrings.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax, title=\"Most reliable route\")\n\n# Add labels and legend\nax.legend(loc=\"upper right\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_most_reliable_route_line_zoomed.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 05 plot both\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data with two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6, 4))\n\n# add condition for the linestrings\ncondition = gdf_germany_linestrings[\"Minutes of delay\"] < 6\ngdf_germany_linestrings[condition].plot(ax=ax1, color=\"#19a824\", linewidth=1, label='< 6 min')\ngdf_germany_linestrings[~condition].plot(ax=ax1, color=\"crimson\", linewidth=1, label='>= 6 min')\n\n# add condition for the linestrings\ncondition = gdf_germany_linestrings[\"Minutes of delay\"] < 6\ngdf_germany_linestrings[condition].plot(ax=ax2, color=\"#19a824\", linewidth=2, label='< 6 min')\ngdf_germany_linestrings[~condition].plot(ax=ax2, color=\"crimson\", linewidth=2, label='>= 6 min')\n\n# Add the base map\ncx.add_basemap(ax=ax1, crs=gdf_germany_linestrings.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=False)\ncx.add_basemap(ax=ax2, crs=gdf_germany_linestrings.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7,\n               reset_extent=True, zoom=100)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_linestrings.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax1, title=\"Most reliable route\")\ncx.plot_map(im2, bbox, ax=ax2, title=\"Most reliable route (zoomed)\")\n\n# Add labels and legend\nax1.legend(loc=\"upper left\", frameon=False)\nax2.legend(loc=\"upper right\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_most_reliable_route_line.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### MOST RELIABLE ROUTE VS FASTEST ROUTE ####\n\n### without colormap ####\n\n#### 02 map of Germany\n# Extract LineString coordinates and create LineString geometries & point geometries\ngeometry_rel = [Point(xy) for xy in\n                zip(gdf_stations_rel[\"Coordinate Longitude\"], gdf_stations_rel[\"Coordinate Latitude\"])]\ngeometry_fast = [Point(xy) for xy in\n                 zip(gdf_stations_fast[\"Coordinate Longitude\"], gdf_stations_fast[\"Coordinate Latitude\"])]\n\n# Create GeoDataFrame\ngeo_df_rel = gpd.GeoDataFrame(gdf_stations_rel, geometry=geometry_rel, crs=\"EPSG:4326\")\ngeo_df_fast = gpd.GeoDataFrame(gdf_stations_fast, geometry=geometry_fast, crs=\"EPSG:4326\")\n\n# Get a map of Germany, save as tif\ngermany = cx.Place(\"Deutschland\", source=cx.providers.OpenStreetMap.Mapnik)\n\n# Get the shape of Germany\nwith rasterio.open(\"../doc/fig/tifs/germany_osm.tif\") as r:\n    west, south, east, north = tuple(r.bounds)\n    germany_crs = r.crs\nbb_poly = box(west, south, east, north)\nbb_poly = gpd.GeoDataFrame({\"geometry\": [bb_poly]}, crs=germany_crs)\n\n# Overlay with GeoDataFrame for linestrings\ngdf_germany_rel = gpd.overlay(geo_df_rel, bb_poly.to_crs(geo_df_rel.crs), how=\"intersection\")\ngdf_germany_fast = gpd.overlay(geo_df_fast, bb_poly.to_crs(geo_df_fast.crs), how=\"intersection\")\n\n# Ensure the data is in the proper geographic coordinate system\ngdf_germany_rel = gdf_germany_rel.to_crs(epsg=3395)\ngdf_germany_fast = gdf_germany_fast.to_crs(epsg=3395)\n\n#### 03 plot (full Germany map)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(4, 4))\n\n# add condition for the points\ncondition = gdf_germany_rel[\"Minutes of delay\"] >= 6\ngdf_germany_rel[condition].plot(ax=ax, color=\"crimson\", markersize=1, marker=\"o\")\ngdf_germany_rel[~condition].plot(ax=ax, color=\"#19a824\", markersize=1, marker=\"o\", label='Most reliable route')\n\ncondition = gdf_germany_fast[\"Minutes of delay\"] >= 6\ngdf_germany_fast[condition].plot(ax=ax, color=\"crimson\", markersize=1, marker=\"v\")\ngdf_germany_fast[~condition].plot(ax=ax, color=\"#19a824\", markersize=1, marker=\"v\", label='Fastest route')\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_rel.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7, reset_extent=False)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_rel.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax, title=\"Most reliable route vs. fastest route\")\n\n# Add labels and legend\nax.legend(loc=\"upper left\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 03 plot (zoomed)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(4, 4))\n\n# add condition for the points\ncondition = gdf_germany_rel[\"Minutes of delay\"] >= 6\ngdf_germany_rel[condition].plot(ax=ax, color=\"crimson\", markersize=12, marker=\"o\")\ngdf_germany_rel[~condition].plot(ax=ax, color=\"#19a824\", markersize=12, marker=\"o\", label='Most reliable route')\n\ncondition = gdf_germany_fast[\"Minutes of delay\"] >= 6\ngdf_germany_fast[condition].plot(ax=ax, color=\"crimson\", markersize=12, marker=\"v\")\ngdf_germany_fast[~condition].plot(ax=ax, color=\"#19a824\", markersize=12, marker=\"v\", label='Fastest route')\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_rel.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7, reset_extent=True)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_rel.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax, title=\"Most reliable route vs. fastest route\")\n\n# Add labels and legend\nax.legend(loc=\"lower left\", frameon=False)\n\n# Save as PDF\npdf_filename = \"../doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary_zoomed.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### with colormap ####\n\n\n#### 02 map of Germany\n# Extract LineString coordinates and create LineString geometries & point geometries\ngeometry_rel = [Point(xy) for xy in\n                zip(gdf_stations_rel[\"Coordinate Longitude\"], gdf_stations_rel[\"Coordinate Latitude\"])]\ngeometry_fast = [Point(xy) for xy in\n                 zip(gdf_stations_fast[\"Coordinate Longitude\"], gdf_stations_fast[\"Coordinate Latitude\"])]\n\n# Create GeoDataFrame\ngeo_df_rel = gpd.GeoDataFrame(gdf_stations_rel, geometry=geometry_rel, crs=\"EPSG:4326\")\ngeo_df_fast = gpd.GeoDataFrame(gdf_stations_fast, geometry=geometry_fast, crs=\"EPSG:4326\")\n\n# Get a map of Germany, save as tif\ngermany = cx.Place(\"Deutschland\", source=cx.providers.OpenStreetMap.Mapnik)\n\n# Get the shape of Germany\nwith rasterio.open(\"../doc/fig/tifs/germany_osm.tif\") as r:\n    west, south, east, north = tuple(r.bounds)\n    germany_crs = r.crs\nbb_poly = box(west, south, east, north)\nbb_poly = gpd.GeoDataFrame({\"geometry\": [bb_poly]}, crs=germany_crs)\n\n# Overlay with GeoDataFrame for linestrings\ngdf_germany_rel = gpd.overlay(geo_df_rel, bb_poly.to_crs(geo_df_rel.crs), how=\"intersection\")\ngdf_germany_fast = gpd.overlay(geo_df_fast, bb_poly.to_crs(geo_df_fast.crs), how=\"intersection\")\n\n# Ensure the data is in the proper geographic coordinate system\ngdf_germany_rel = gdf_germany_rel.to_crs(epsg=3395)\ngdf_germany_fast = gdf_germany_fast.to_crs(epsg=3395)\n\n#### 03 plot (zoomed)\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(3, 3))\n\n# connect both dataframes to get min / max values of both\ngdf_germany_both = pd.concat([gdf_germany_rel, gdf_germany_fast])\n\n# Apply log scaling to min & max values\nlog_min_delay = np.log1p(gdf_germany_both[\"Minutes of delay\"].min())\nlog_max_delay = np.log1p(gdf_germany_both[\"Minutes of delay\"].max())\n\n# Create ScalarMappable with common normalization\nnorm = Normalize(vmin=log_min_delay, vmax=log_max_delay)\nsm = ScalarMappable(norm=norm, cmap=\"coolwarm\")\nsm.set_array([])\n\n# Plot the points, create a colorbar for the points\ngdf_germany_rel[\"color\"] = gdf_germany_rel[\"Minutes of delay\"].apply(lambda x: sm.to_rgba(np.log1p(x)))\ngdf_germany_rel[gdf_germany_rel[\"Minutes of delay\"] >= 0].plot(ax=ax, color=gdf_germany_rel.loc[\n    gdf_germany_rel[\"Minutes of delay\"] >= 0, \"color\"],\n                                                               markersize=12, marker=\"o\",\n                                                               label=\"Most reliable route, \\nmean delay = {}\".format(\n                                                                   round(gdf_stations_rel[\"Minutes of delay\"].mean(),\n                                                                         2)))\ngdf_germany_fast[\"color\"] = gdf_germany_fast[\"Minutes of delay\"].apply(lambda x: sm.to_rgba(np.log1p(x)))\ngdf_germany_fast[gdf_germany_fast[\"Minutes of delay\"] >= 0].plot(ax=ax, color=gdf_germany_fast.loc[\n    gdf_germany_fast[\"Minutes of delay\"] >= 0, \"color\"],\n                                                                 markersize=12, marker=\"v\",\n                                                                 label=\"Fastest route, \\nmean delay = {}\".format(\n                                                                     round(gdf_stations_fast[\"Minutes of delay\"].mean(),\n                                                                           2)))\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_rel.crs, source=\"../doc/fig/tifs/germany_osm.tif\", alpha=0.7, reset_extent=True)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_rel.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax)  # title = \"Most reliable route vs. fastest route\"\n\n# Add labels and legend\nax.legend(loc=\"lower left\", frameon=False)\n\n# Add colorbar for the points\ncbar = plt.colorbar(sm, ax=ax, label=\"Minutes of delay (log scale)\", orientation=\"vertical\", pad=0.02,\n                    ticks=[1, 2, 3, 4, 5])\n\n# Convert log-scaled ticks back to original scale for display\ncbar_ticks_original_scale = np.expm1(cbar.get_ticks())\nrounded_ticks = [round(tick) if tick % 1 else int(tick) for tick in cbar_ticks_original_scale]\ncbar.set_ticklabels([f\"{int(original_scale)} min\" for original_scale in rounded_ticks])\ncbar.set_label(\"Minutes of delay (log scaled)\")\n\n# Remove border color\ncbar.outline.set_edgecolor(\"none\")\n\n# Save as PDF\npdf_filename = \"../doc/fig/maps_KI_03_reliable_vs_fastest_zoomed.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 03 plot (zoomed) CARTO\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column=\"half\", nrows=1, ncols=2, usetex=False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(3, 3))\n\n# connect both dataframes to get min / max values of both\ngdf_germany_both = pd.concat([gdf_germany_rel, gdf_germany_fast])\n\n# Apply log scaling to min & max values\nlog_min_delay = np.log1p(gdf_germany_both[\"Minutes of delay\"].min())\nlog_max_delay = np.log1p(gdf_germany_both[\"Minutes of delay\"].max())\n\n# Create ScalarMappable with common normalization\nnorm = Normalize(vmin=log_min_delay, vmax=log_max_delay)\nsm = ScalarMappable(norm=norm, cmap=\"coolwarm\")\nsm.set_array([])\n\n# Plot the points, create a colorbar for the points\ngdf_germany_rel[\"color\"] = gdf_germany_rel[\"Minutes of delay\"].apply(lambda x: sm.to_rgba(np.log1p(x)))\ngdf_germany_rel[gdf_germany_rel[\"Minutes of delay\"] >= 0].plot(ax=ax, color=gdf_germany_rel.loc[\n    gdf_germany_rel[\"Minutes of delay\"] >= 0, \"color\"],\n                                                               markersize=12, marker=\"o\",\n                                                               label=\"Most reliable route, \\nmean delay = {}\".format(\n                                                                   round(gdf_stations_rel[\"Minutes of delay\"].mean(),\n                                                                         2)))\ngdf_germany_fast[\"color\"] = gdf_germany_fast[\"Minutes of delay\"].apply(lambda x: sm.to_rgba(np.log1p(x)))\ngdf_germany_fast[gdf_germany_fast[\"Minutes of delay\"] >= 0].plot(ax=ax, color=gdf_germany_fast.loc[\n    gdf_germany_fast[\"Minutes of delay\"] >= 0, \"color\"],\n                                                                 markersize=12, marker=\"v\",\n                                                                 label=\"Fastest route, \\nmean delay = {}\".format(\n                                                                     round(gdf_stations_fast[\"Minutes of delay\"].mean(),\n                                                                           2)))\n\n# Add the base map\ncx.add_basemap(ax=ax, crs=gdf_germany_rel.crs, source=\"../doc/fig/tifs/germany_Carto.tif\", alpha=1, reset_extent=True)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany_rel.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll=True, zoom=germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax=ax)  # title = \"Most reliable route vs. fastest route\"\n\n# Add labels and legend\nax.legend(loc=\"lower left\", frameon=False)\n\n# Add colorbar for the points\ncbar = plt.colorbar(sm, ax=ax, label=\"Minutes of delay (log scale)\", orientation=\"vertical\", pad=0.02,\n                    ticks=[1, 2, 3, 4, 5])\n\n# Convert log-scaled ticks back to original scale for display\ncbar_ticks_original_scale = np.expm1(cbar.get_ticks())\nrounded_ticks = [round(tick) if tick % 1 else int(tick) for tick in cbar_ticks_original_scale]\ncbar.set_ticklabels([f\"{int(original_scale)} min\" for original_scale in rounded_ticks])\ncbar.set_label(\"Minutes of delay (log scaled)\")\n\n# Remove border color\ncbar.outline.set_edgecolor(\"none\")\n\n# Save as PDF\npdf_filename = \"../doc/fig/maps_KI_03_reliable_vs_fastest_zoomed_Carto.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches=\"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n#### 06 mean delay of most reliable route\n\n# get the mean delay of the fastest route\nprint(\"The mean delay of the most reliable route is\", gdf_stations_rel[\"Minutes of delay\"].mean())\nprint(\"The mean delay of the 'fastest' route (according to DB) is\", gdf_stations_fast[\"Minutes of delay\"].mean())\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/exp/maps_KI_03_routes.py b/exp/maps_KI_03_routes.py
--- a/exp/maps_KI_03_routes.py	(revision dd2c448307ee5cbd7e0db937e24244ddc7f84123)
+++ b/exp/maps_KI_03_routes.py	(date 1706256259406)
@@ -645,6 +645,9 @@
     pdf.savefig(fig, bbox_inches="tight")
     print(f"Plot saved as {pdf_filename}")
 
+
+
+
 #### with colormap ####
 
 
@@ -677,6 +680,10 @@
 gdf_germany_rel = gdf_germany_rel.to_crs(epsg=3395)
 gdf_germany_fast = gdf_germany_fast.to_crs(epsg=3395)
 
+
+
+
+
 #### 03 plot (zoomed)
 
 # set plotting stylesheet
@@ -748,6 +755,9 @@
     pdf.savefig(fig, bbox_inches="tight")
     print(f"Plot saved as {pdf_filename}")
 
+
+
+
 #### 03 plot (zoomed) CARTO
 
 # set plotting stylesheet
Index: exp/Frankfurt zoom.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/exp/Frankfurt zoom.py b/exp/Frankfurt zoom.py
new file mode 100644
--- /dev/null	(date 1706263069865)
+++ b/exp/Frankfurt zoom.py	(date 1706263069865)
@@ -0,0 +1,97 @@
+import pandas as pd
+import numpy as np
+from shapely.geometry import Point, LineString, box
+import geopandas as gpd
+import matplotlib.pyplot as plt
+import matplotlib.colors as colors
+import matplotlib as mpl
+import contextily as cx
+import rasterio
+from tueplots import bundles
+from matplotlib.backends.backend_pdf import PdfPages
+from matplotlib.colors import Normalize
+from matplotlib.cm import ScalarMappable
+from matplotlib.colors import SymLogNorm
+
+
+
+#### 00 read cleaned data
+from ipynb.fs.full.exploration_cleaning import get_data
+from ipynb.fs.full.exploration_cleaning import get_paths
+
+data = get_data(which="mean")
+path_delays = get_paths()
+gdf_stations = pd.read_csv("../dat/stations_with_nearest_routes.csv", sep=",")
+data_routes = gpd.read_file("../dat/geo-strecke/strecken_polyline.shp")
+
+print("There are {} unique routes we found.".format(len(path_delays)))
+
+#### 01 Routes
+
+## 1.1 Most reliable route
+# get the route with the least delay = most reliable route
+paths_sorted = sorted(path_delays.items(), key=lambda x: x[1]["mean_delay"])
+rel_path = paths_sorted[0][1]["routes"]
+print("The optimal route is: {}".format(rel_path))
+print(paths_sorted[0][1]["mean_delay"])
+
+# filter the data for the rel_path
+gdf_stations_rel = gdf_stations[gdf_stations["Route"].isin(rel_path)]
+
+# merge with data
+gdf_stations_rel = gdf_stations_rel.merge(data, on="Station or stop")
+
+
+geometry_points = [Point(xy) for xy in
+                   zip(gdf_stations_rel["Coordinate Longitude"], gdf_stations_rel["Coordinate Latitude"])]
+
+
+# Create GeoDataFrame
+geo_df = gpd.GeoDataFrame(gdf_stations_rel, geometry=geometry_points, crs="EPSG:4326")
+
+map = cx.Place("Baden", source = cx.providers.CartoDB.Positron, path = "map_Carto.tif")
+
+
+#
+# Frankfurt = cx.Place("Heidelberg", source = cx.providers.CartoDB.Positron, path = "Frankfurt_Carto.tif")
+#
+#
+# # Get the shape of Germany
+# with rasterio.open("Frankfurt_Carto.tif") as r:
+#     west, south, east, north = tuple(r.bounds)
+#     Frankfurt_crs = r.crs
+# bb_poly = box(west, south, east, north)
+# bb_poly = gpd.GeoDataFrame({"geometry": [bb_poly]}, crs = Frankfurt_crs)
+#
+#
+# gdf_Frankfurt = gpd.overlay(geo_df, bb_poly.to_crs(geo_df.crs), how = "intersection")
+#
+# # Ensure the data is in the proper geographic coordinate system
+# gdf_Frankfurt = gdf_Frankfurt.to_crs(epsg = 3395)
+#
+#
+#
+#
+# #### 02 plot
+#
+# # set plotting stylesheet
+# plt.rcParams.update(bundles.icml2022(column = "half", nrows = 1, ncols = 2, usetex = False))
+#
+# # Plot the data
+# fig, ax = plt.subplots(figsize = (4, 4))
+# geo_df.plot(ax = ax, markersize = 0, color = "k")
+#
+# # Add the base map
+# cx.add_basemap(ax = ax, crs = geo_df.crs, source = "Frankfurt_Carto.tif", alpha = 1)
+#
+# # Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap
+# bounds = geo_df.total_bounds
+# west, south, east, north = bounds
+#
+# # Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds
+# im2, bbox = cx.bounds2img(west, south, east, north, ll = True, zoom = Frankfurt.zoom)
+#
+# # Plot the map with the aspect ratio fixed
+# cx.plot_map(im2, bbox, ax = ax) # title = "Mean delay of trains in 2016 in Germany"
+#
+# plt.show()
\ No newline at end of file
Index: exp/maps_KI_01_all_data.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\nfrom shapely.geometry import Point, box\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport contextily as cx\nimport rasterio\nfrom tueplots import bundles\nfrom matplotlib.backends.backend_pdf import PdfPages\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\n\n\n\n#### 00 get cleaned data\nfrom ipynb.fs.full.exploration_cleaning import get_data\ndata = get_data(which = \"mean\")\n\n\n# create geometry column with a point object of the coordinates\ngeometry = [Point(xy) for xy in zip(data[\"Coordinate Longitude\"], data[\"Coordinate Latitude\"])]\n\n# create GeoDataFrame\ngeo_df = gpd.GeoDataFrame(data, geometry = geometry, crs = \"EPSG:4326\")  # Use the correct CRS\n\n\n\n\n#### 01 map of Germany\n\n# Get a map of Germany, save as tif\ngermany = cx.Place(\"Deutschland\", source = cx.providers.OpenStreetMap.Mapnik)\n\n\n# Get the shape of Germany\nwith rasterio.open(\"../doc/fig/tifs/germany_osm.tif\") as r:\n    west, south, east, north = tuple(r.bounds)\n    germany_crs = r.crs\nbb_poly = box(west, south, east, north)\nbb_poly = gpd.GeoDataFrame({\"geometry\": [bb_poly]}, crs = germany_crs)\n\ngdf_germany = gpd.overlay(geo_df, bb_poly.to_crs(geo_df.crs), how = \"intersection\")\n\n# Ensure the data is in the proper geographic coordinate system\ngdf_germany = gdf_germany.to_crs(epsg = 3395)\n\n\n\n\n#### 02 plot\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column = \"half\", nrows = 1, ncols = 2, usetex = False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize = (4, 4))\ngdf_germany.plot(ax = ax, markersize = 0, color = \"k\")\n\n# Add the base map\ncx.add_basemap(ax = ax, crs = gdf_germany.crs, source = \"../doc/fig/tifs/germany_osm.tif\", alpha = 0.7)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll = True, zoom = germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax = ax) # title = \"Mean delay of trains in 2016 in Germany\"\n\n# Add condition for the markers\n# green means no delay (less than 6 minutes), red means delay (more or equal to 6 minutes)\ncondition = gdf_germany[\"Minutes of delay\"] < 6\ngdf_germany[condition].plot(ax = ax, markersize = 1, marker = \"o\", color = \"#19a824\", alpha = 0.9, label = \"< 6 min\")\ngdf_germany[~condition].plot(ax = ax, markersize = 1, marker = \"o\", color = \"crimson\", alpha = 0.7, label = \">= 6 min\")\n\n# Add labels and legend\nax.legend(loc = \"upper left\", frameon = False)\n\n\n\n\n#### 03 Save as PDF\npdf_filename = \"../doc/fig/maps_KI_01_all_data.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches = \"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n\n\n#### 02 plot\n\n# set plotting stylesheet\nplt.rcParams.update(bundles.icml2022(column = \"half\", nrows = 1, ncols = 2, usetex = False))\n\n# Plot the data\nfig, ax = plt.subplots(figsize = (4, 3))\ngdf_germany.plot(ax = ax, markersize = 0, color = \"k\")\n\n\n# Apply log scaling to min & max values\nlog_min_delay = np.log1p(gdf_germany[\"Minutes of delay\"].min())\nlog_max_delay = np.log1p(gdf_germany[\"Minutes of delay\"].max())\n\n# Create ScalarMappable with common normalization\nnorm = Normalize(vmin = log_min_delay, vmax = log_max_delay)\nsm = ScalarMappable(norm = norm, cmap = \"coolwarm\")\nsm.set_array([])\n\n# Plot the points, create a colorbar for the points\ngdf_germany[\"color\"] = gdf_germany[\"Minutes of delay\"].apply(lambda x: sm.to_rgba(np.log1p(x)))\ngdf_germany[gdf_germany[\"Minutes of delay\"] >= 0].plot(ax = ax, color = gdf_germany.loc[gdf_germany[\"Minutes of delay\"] >= 0, \"color\"], markersize = 1, marker = \"o\")\n\n\n# Add the base map\ncx.add_basemap(ax = ax, crs = gdf_germany.crs, source = \"../doc/fig/tifs/germany_Carto.tif\", alpha = 1)\n\n# Get the bounds of the geodataframe, converted to the same CRS as the contextily basemap\nbounds = gdf_germany.total_bounds\nwest, south, east, north = bounds\n\n# Get base map image for the bounds with the correct zoom level. 'll' signifies long-lat bounds\nim2, bbox = cx.bounds2img(west, south, east, north, ll = True, zoom = germany.zoom)\n\n# Plot the map with the aspect ratio fixed\ncx.plot_map(im2, bbox, ax = ax) # title = \"Mean delay of trains in 2016 in Germany\"\n\n# Add colorbar for the points\ncbar = plt.colorbar(sm, ax = ax, label = \"Minutes of delay (log scale)\", orientation = \"vertical\", pad = 0.02, ticks = [1, 2, 3, 4, 5, 6, 7])\n\n# Convert log-scaled ticks back to original scale for display\ncbar_ticks_original_scale = np.expm1(cbar.get_ticks())\nrounded_ticks = [round(tick) if tick % 1 else int(tick) for tick in cbar_ticks_original_scale]\ncbar.set_ticklabels([f\"{int(original_scale)} min\" for original_scale in rounded_ticks])\ncbar.set_label(\"Minutes of delay (log scaled)\")\n\n# Remove border color\ncbar.outline.set_edgecolor(\"none\")\n\n\n\n\n#### 03 Save as PDF\npdf_filename = \"../doc/fig/maps_KI_01_all_data_cmap.pdf\"\nwith PdfPages(pdf_filename) as pdf:\n    pdf.savefig(fig, bbox_inches = \"tight\")\n    print(f\"Plot saved as {pdf_filename}\")\n\n\nprint(\"The mean delay of all Germany in 2016 was\", round(gdf_germany[\"Minutes of delay\"].mean(), 2), \"minutes.\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/exp/maps_KI_01_all_data.py b/exp/maps_KI_01_all_data.py
--- a/exp/maps_KI_01_all_data.py	(revision dd2c448307ee5cbd7e0db937e24244ddc7f84123)
+++ b/exp/maps_KI_01_all_data.py	(date 1706256423892)
@@ -30,7 +30,9 @@
 #### 01 map of Germany
 
 # Get a map of Germany, save as tif
-germany = cx.Place("Deutschland", source = cx.providers.OpenStreetMap.Mapnik)
+germany = cx.Place("Deutschland", source = cx.providers.OpenStreetMap.Mapnik, path = "../doc/fig/tifs/germany_osm.tif")
+germany = cx.Place("Deutschland", source = cx.providers.CartoDB.Positron, path = "../doc/fig/tifs/germany_Carto.tif")
+
 
 
 # Get the shape of Germany
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"d0c7ea41-b705-46fd-ba61-7835c4452d72\" name=\"Changes\" comment=\"Finetuning maps\">\n      <change beforePath=\"$PROJECT_DIR$/doc/bibliography.bib\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/bibliography.bib\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/maps_KI_01_all_data.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/maps_KI_01_all_data.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/maps_KI_01_all_data_cmap.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/maps_KI_01_all_data_cmap.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/maps_KI_03_reliable_vs_fastest_zoomed.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/maps_KI_03_reliable_vs_fastest_zoomed.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/maps_KI_03_reliable_vs_fastest_zoomed_Carto.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/maps_KI_03_reliable_vs_fastest_zoomed_Carto.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points_full.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points_full.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points_zoomed.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points_zoomed.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line_full.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line_full.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line_zoomed.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line_zoomed.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points_full.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points_full.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points_zoomed.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points_zoomed.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary_zoomed.pdf\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary_zoomed.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/doc/report.tex\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/doc/report.tex\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/exp/maps_KI_01_all_data.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/exp/maps_KI_01_all_data.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/exp/maps_KI_03_routes.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/exp/maps_KI_03_routes.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n        <option value=\"Jupyter Notebook\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"Kim_visualizations\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;kimmizi&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">\n    <option name=\"selectedUrlAndAccountId\">\n      <UrlAndAccount>\n        <option name=\"accountId\" value=\"41dc4376-4f8d-4ba9-a042-caa0552a4ba1\" />\n        <option name=\"url\" value=\"https://github.com/frederikpanse/db_project.git\" />\n      </UrlAndAccount>\n    </option>\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 8\n}</component>\n  <component name=\"ProjectId\" id=\"2b4neiP398aUjR3e3BC0X18xP4i\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;Python tests.Doctests in linalg.executor&quot;: &quot;Run&quot;,\n    &quot;Python.deutsche_bahn_frankfurt.executor&quot;: &quot;Run&quot;,\n    &quot;Python.exp_KI_01_matching_stations_with_routes.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all data.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all data_Carto.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all data_osm.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all data_osm2.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all data_osm3.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all_data.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all_fastest_vs._most_reliable_route_osm.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all_weekdays.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_all_weekdays_osm.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_fastest_route.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_fastest_route_points.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_weekend_weekday.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_01_weekend_weekday_osm.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_02_weekdays.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_02_weekend_weekday.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_03_all_weekdays.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_03_routes.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_04_fastest_route.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_04_fastest_route_points.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_05_most_reliable_route.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_05_most_reliable_route_points.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_06_reliable_vs_fastest.executor&quot;: &quot;Run&quot;,\n    &quot;Python.maps_KI_06_reliable_vs_fastest_cmap.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/kim/Desktop/QDS/1. Semester/Data Literacy/db_project/exp&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/exp\" />\n      <recent name=\"$PROJECT_DIR$/doc/fig\" />\n      <recent name=\"$PROJECT_DIR$/dat/cleaned data\" />\n      <recent name=\"$PROJECT_DIR$/dat\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/doc/fig/trash\" />\n      <recent name=\"$PROJECT_DIR$/dat\" />\n      <recent name=\"$PROJECT_DIR$/doc/fig/other figs\" />\n      <recent name=\"$PROJECT_DIR$/doc/fig\" />\n      <recent name=\"$PROJECT_DIR$/exp\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"d0c7ea41-b705-46fd-ba61-7835c4452d72\" name=\"Changes\" comment=\"\" />\n      <created>1705483315573</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1705483315573</updated>\n      <workItem from=\"1705483316784\" duration=\"351000\" />\n      <workItem from=\"1705483977649\" duration=\"322000\" />\n      <workItem from=\"1705485271508\" duration=\"456000\" />\n      <workItem from=\"1705485743102\" duration=\"76000\" />\n      <workItem from=\"1705485827980\" duration=\"914000\" />\n      <workItem from=\"1705487646274\" duration=\"65000\" />\n      <workItem from=\"1705487922765\" duration=\"469000\" />\n      <workItem from=\"1705488796542\" duration=\"991000\" />\n      <workItem from=\"1705491051898\" duration=\"135000\" />\n      <workItem from=\"1705512732326\" duration=\"4000\" />\n      <workItem from=\"1705772024013\" duration=\"77000\" />\n      <workItem from=\"1705772111261\" duration=\"12000\" />\n      <workItem from=\"1705772128064\" duration=\"12736000\" />\n      <workItem from=\"1705844467375\" duration=\"8696000\" />\n      <workItem from=\"1705918579366\" duration=\"1634000\" />\n      <workItem from=\"1706033662665\" duration=\"1895000\" />\n      <workItem from=\"1706087942222\" duration=\"334000\" />\n      <workItem from=\"1706097724489\" duration=\"8910000\" />\n      <workItem from=\"1706107372285\" duration=\"5480000\" />\n      <workItem from=\"1706112860103\" duration=\"713000\" />\n      <workItem from=\"1706166087052\" duration=\"317000\" />\n      <workItem from=\"1706174472882\" duration=\"703000\" />\n      <workItem from=\"1706175242965\" duration=\"3080000\" />\n      <workItem from=\"1706191312381\" duration=\"185000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"test commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705485679342</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705485679343</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"test commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705485871194</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705485871194</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"adding the right datasets\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705488922372</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705488922372</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Adding the Introduction &amp; authors to tex\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705491177382</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705491177382</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Adding maps\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705832239224</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705832239224</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Adding more maps &amp; data\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705852995065</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705852995065</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Adding the pdfs (maps)\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705853022835</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705853022835</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"renaming the docs\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705853200786</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705853200786</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"renaming the docs\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1705918671317</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705918671317</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Finding the most reliable route, mapping it\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706108106542</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706108106542</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Reorganizing the docs\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706112877655</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706112877655</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Finetuning maps\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706175159562</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706175159562</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"13\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"test commit\" />\n    <MESSAGE value=\"adding the right datasets\" />\n    <MESSAGE value=\"Adding the Introduction &amp; authors to tex\" />\n    <MESSAGE value=\"Adding maps\" />\n    <MESSAGE value=\"Adding more maps &amp; data\" />\n    <MESSAGE value=\"Adding the pdfs (maps)\" />\n    <MESSAGE value=\"renaming the docs\" />\n    <MESSAGE value=\"Finding the most reliable route, mapping it\" />\n    <MESSAGE value=\"Reorganizing the docs\" />\n    <MESSAGE value=\"Finetuning maps\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Finetuning maps\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_06_reliable_vs_fastest.coverage\" NAME=\"maps_KI_06_reliable_vs_fastest Coverage Results\" MODIFIED=\"1706098929142\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_all_weekdays.coverage\" NAME=\"maps_KI_01_all_weekdays Coverage Results\" MODIFIED=\"1705851020350\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_02_weekdays.coverage\" NAME=\"maps_KI_02_weekdays Coverage Results\" MODIFIED=\"1706108994685\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/exp\" />\n    <SUITE FILE_PATH=\"coverage/db_project$Doctests_in_linalg.coverage\" NAME=\"Doctests in linalg Coverage Results\" MODIFIED=\"1705848412337\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"/usr/local/lib/python3.11/site-packages/numpy/linalg\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_all_data_Carto.coverage\" NAME=\"maps_KI_01_all data_Carto Coverage Results\" MODIFIED=\"1705830352229\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_06_reliable_vs_fastest_cmap.coverage\" NAME=\"maps_KI_06_reliable_vs_fastest_cmap Coverage Results\" MODIFIED=\"1706107820322\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/exp\" />\n    <SUITE FILE_PATH=\"coverage/db_project$deutsche_bahn_frankfurt.coverage\" NAME=\"deutsche_bahn_frankfurt Coverage Results\" MODIFIED=\"1705919850675\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/exp\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_all_data_osm3.coverage\" NAME=\"maps_KI_01_all data_osm3 Coverage Results\" MODIFIED=\"1705826375149\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_fastest_route.coverage\" NAME=\"maps_KI_01_fastest_route Coverage Results\" MODIFIED=\"1705852558007\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_03_routes.coverage\" NAME=\"maps_KI_03_routes Coverage Results\" MODIFIED=\"1706191396030\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/exp\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_all_data_osm2.coverage\" NAME=\"maps_KI_01_all data_osm2 Coverage Results\" MODIFIED=\"1705825358335\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_fastest_route_points.coverage\" NAME=\"maps_KI_01_fastest_route_points Coverage Results\" MODIFIED=\"1705852901430\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$exp_KI_01_matching_stations_with_routes.coverage\" NAME=\"exp_KI_01_matching_stations_with_routes Coverage Results\" MODIFIED=\"1705920190348\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/exp\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_all_data.coverage\" NAME=\"maps_KI_01_all_data Coverage Results\" MODIFIED=\"1706191462517\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/exp\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_weekend_weekday_osm.coverage\" NAME=\"maps_KI_01_weekend_weekday_osm Coverage Results\" MODIFIED=\"1705830029829\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_05_most_reliable_route_points.coverage\" NAME=\"maps_KI_05_most_reliable_route_points Coverage Results\" MODIFIED=\"1706035451563\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_weekend_weekday.coverage\" NAME=\"maps_KI_01_weekend_weekday Coverage Results\" MODIFIED=\"1705852424347\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_02_weekend_weekday.coverage\" NAME=\"maps_KI_02_weekend_weekday Coverage Results\" MODIFIED=\"1706033981740\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_all_fastest_vs__most_reliable_route_osm.coverage\" NAME=\"maps_KI_01_all_fastest_vs._most_reliable_route_osm Coverage Results\" MODIFIED=\"1705847773655\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_05_most_reliable_route.coverage\" NAME=\"maps_KI_05_most_reliable_route Coverage Results\" MODIFIED=\"1706034237634\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_03_all_weekdays.coverage\" NAME=\"maps_KI_03_all_weekdays Coverage Results\" MODIFIED=\"1705853084069\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_all_data_osm.coverage\" NAME=\"maps_KI_01_all data_osm Coverage Results\" MODIFIED=\"1705776857672\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_01_all_weekdays_osm.coverage\" NAME=\"maps_KI_01_all_weekdays_osm Coverage Results\" MODIFIED=\"1705831722537\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_04_fastest_route.coverage\" NAME=\"maps_KI_04_fastest_route Coverage Results\" MODIFIED=\"1706034007610\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n    <SUITE FILE_PATH=\"coverage/db_project$maps_KI_04_fastest_route_points.coverage\" NAME=\"maps_KI_04_fastest_route_points Coverage Results\" MODIFIED=\"1706098096978\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/doc/fig\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision dd2c448307ee5cbd7e0db937e24244ddc7f84123)
+++ b/.idea/workspace.xml	(date 1706270943098)
@@ -4,24 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="d0c7ea41-b705-46fd-ba61-7835c4452d72" name="Changes" comment="Finetuning maps">
-      <change beforePath="$PROJECT_DIR$/doc/bibliography.bib" beforeDir="false" afterPath="$PROJECT_DIR$/doc/bibliography.bib" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/maps_KI_01_all_data.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/maps_KI_01_all_data.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/maps_KI_01_all_data_cmap.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/maps_KI_01_all_data_cmap.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/maps_KI_03_reliable_vs_fastest_zoomed.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/maps_KI_03_reliable_vs_fastest_zoomed.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/maps_KI_03_reliable_vs_fastest_zoomed_Carto.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/maps_KI_03_reliable_vs_fastest_zoomed_Carto.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points_full.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points_full.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points_zoomed.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_fastest_route_points_zoomed.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line_full.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line_full.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line_zoomed.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_line_zoomed.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points_full.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points_full.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points_zoomed.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_most_reliable_route_points_zoomed.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary_zoomed.pdf" beforeDir="false" afterPath="$PROJECT_DIR$/doc/fig/other figs/maps_KI_03_reliable_vs_fastest_binary_zoomed.pdf" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/doc/report.tex" beforeDir="false" afterPath="$PROJECT_DIR$/doc/report.tex" afterDir="false" />
+    <list default="true" id="d0c7ea41-b705-46fd-ba61-7835c4452d72" name="Changes" comment="Finetuning maps &amp; writing the report">
+      <change afterPath="$PROJECT_DIR$/exp/Frankfurt zoom.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/exp/Frankfurt_Carto.tif" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/exp/map_Carto.tif" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/exp/maps_KI_01_all_data.py" beforeDir="false" afterPath="$PROJECT_DIR$/exp/maps_KI_01_all_data.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/exp/maps_KI_03_routes.py" beforeDir="false" afterPath="$PROJECT_DIR$/exp/maps_KI_03_routes.py" afterDir="false" />
     </list>
@@ -33,8 +20,8 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
-        <option value="Python Script" />
         <option value="Jupyter Notebook" />
+        <option value="Python Script" />
       </list>
     </option>
   </component>
@@ -74,49 +61,50 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
-    &quot;Python tests.Doctests in linalg.executor&quot;: &quot;Run&quot;,
-    &quot;Python.deutsche_bahn_frankfurt.executor&quot;: &quot;Run&quot;,
-    &quot;Python.exp_KI_01_matching_stations_with_routes.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all data.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all data_Carto.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all data_osm.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all data_osm2.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all data_osm3.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all_data.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all_fastest_vs._most_reliable_route_osm.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all_weekdays.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_all_weekdays_osm.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_fastest_route.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_fastest_route_points.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_weekend_weekday.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_01_weekend_weekday_osm.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_02_weekdays.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_02_weekend_weekday.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_03_all_weekdays.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_03_routes.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_04_fastest_route.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_04_fastest_route_points.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_05_most_reliable_route.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_05_most_reliable_route_points.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_06_reliable_vs_fastest.executor&quot;: &quot;Run&quot;,
-    &quot;Python.maps_KI_06_reliable_vs_fastest_cmap.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/Users/kim/Desktop/QDS/1. Semester/Data Literacy/db_project/exp&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "Python tests.Doctests in linalg.executor": "Run",
+    "Python.Frankfurt zoom.executor": "Run",
+    "Python.deutsche_bahn_frankfurt.executor": "Run",
+    "Python.exp_KI_01_matching_stations_with_routes.executor": "Run",
+    "Python.maps_KI_01_all data.executor": "Run",
+    "Python.maps_KI_01_all data_Carto.executor": "Run",
+    "Python.maps_KI_01_all data_osm.executor": "Run",
+    "Python.maps_KI_01_all data_osm2.executor": "Run",
+    "Python.maps_KI_01_all data_osm3.executor": "Run",
+    "Python.maps_KI_01_all_data.executor": "Run",
+    "Python.maps_KI_01_all_fastest_vs._most_reliable_route_osm.executor": "Run",
+    "Python.maps_KI_01_all_weekdays.executor": "Run",
+    "Python.maps_KI_01_all_weekdays_osm.executor": "Run",
+    "Python.maps_KI_01_fastest_route.executor": "Run",
+    "Python.maps_KI_01_fastest_route_points.executor": "Run",
+    "Python.maps_KI_01_weekend_weekday.executor": "Run",
+    "Python.maps_KI_01_weekend_weekday_osm.executor": "Run",
+    "Python.maps_KI_02_weekdays.executor": "Run",
+    "Python.maps_KI_02_weekend_weekday.executor": "Run",
+    "Python.maps_KI_03_all_weekdays.executor": "Run",
+    "Python.maps_KI_03_routes.executor": "Run",
+    "Python.maps_KI_04_fastest_route.executor": "Run",
+    "Python.maps_KI_04_fastest_route_points.executor": "Run",
+    "Python.maps_KI_05_most_reliable_route.executor": "Run",
+    "Python.maps_KI_05_most_reliable_route_points.executor": "Run",
+    "Python.maps_KI_06_reliable_vs_fastest.executor": "Run",
+    "Python.maps_KI_06_reliable_vs_fastest_cmap.executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "git-widget-placeholder": "main",
+    "last_opened_file_path": "/Users/kim/Desktop/QDS/1. Semester/Data Literacy/db_project/exp",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$/exp" />
@@ -170,7 +158,9 @@
       <workItem from="1706166087052" duration="317000" />
       <workItem from="1706174472882" duration="703000" />
       <workItem from="1706175242965" duration="3080000" />
-      <workItem from="1706191312381" duration="185000" />
+      <workItem from="1706191312381" duration="205000" />
+      <workItem from="1706197262911" duration="274000" />
+      <workItem from="1706255682713" duration="2401000" />
     </task>
     <task id="LOCAL-00001" summary="test commit">
       <option name="closed" value="true" />
@@ -268,7 +258,15 @@
       <option name="project" value="LOCAL" />
       <updated>1706175159562</updated>
     </task>
-    <option name="localTasksCounter" value="13" />
+    <task id="LOCAL-00013" summary="Finetuning maps &amp; writing the report">
+      <option name="closed" value="true" />
+      <created>1706191511717</created>
+      <option name="number" value="00013" />
+      <option name="presentableId" value="LOCAL-00013" />
+      <option name="project" value="LOCAL" />
+      <updated>1706191511717</updated>
+    </task>
+    <option name="localTasksCounter" value="14" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -297,7 +295,8 @@
     <MESSAGE value="Finding the most reliable route, mapping it" />
     <MESSAGE value="Reorganizing the docs" />
     <MESSAGE value="Finetuning maps" />
-    <option name="LAST_COMMIT_MESSAGE" value="Finetuning maps" />
+    <MESSAGE value="Finetuning maps &amp; writing the report" />
+    <option name="LAST_COMMIT_MESSAGE" value="Finetuning maps &amp; writing the report" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/db_project$maps_KI_06_reliable_vs_fastest.coverage" NAME="maps_KI_06_reliable_vs_fastest Coverage Results" MODIFIED="1706098929142" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/doc/fig" />
@@ -306,6 +305,7 @@
     <SUITE FILE_PATH="coverage/db_project$Doctests_in_linalg.coverage" NAME="Doctests in linalg Coverage Results" MODIFIED="1705848412337" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="/usr/local/lib/python3.11/site-packages/numpy/linalg" />
     <SUITE FILE_PATH="coverage/db_project$maps_KI_01_all_data_Carto.coverage" NAME="maps_KI_01_all data_Carto Coverage Results" MODIFIED="1705830352229" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/doc/fig" />
     <SUITE FILE_PATH="coverage/db_project$maps_KI_06_reliable_vs_fastest_cmap.coverage" NAME="maps_KI_06_reliable_vs_fastest_cmap Coverage Results" MODIFIED="1706107820322" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/exp" />
+    <SUITE FILE_PATH="coverage/db_project$Frankfurt_zoom.coverage" NAME="Frankfurt zoom Coverage Results" MODIFIED="1706263069872" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/exp" />
     <SUITE FILE_PATH="coverage/db_project$deutsche_bahn_frankfurt.coverage" NAME="deutsche_bahn_frankfurt Coverage Results" MODIFIED="1705919850675" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/exp" />
     <SUITE FILE_PATH="coverage/db_project$maps_KI_01_all_data_osm3.coverage" NAME="maps_KI_01_all data_osm3 Coverage Results" MODIFIED="1705826375149" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/doc/fig" />
     <SUITE FILE_PATH="coverage/db_project$maps_KI_01_fastest_route.coverage" NAME="maps_KI_01_fastest_route Coverage Results" MODIFIED="1705852558007" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/doc/fig" />
